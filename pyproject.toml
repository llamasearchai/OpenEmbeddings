[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openembeddings"
version = "1.0.1"
description = "Production-ready embedding library with hybrid search, quantization, and evaluation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"}
]
maintainers = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"}
]
keywords = [
    "embeddings",
    "information-retrieval",
    "nlp",
    "machine-learning",
    "search",
    "semantic-search",
    "dense-retrieval",
    "sparse-retrieval",
    "hybrid-search",
    "quantization",
    "evaluation",
    "mteb"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search"
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.9.0",
    "transformers>=4.20.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "tqdm>=4.60.0",
    "pydantic>=1.8.0",
    "pyyaml>=6.0",
    "requests>=2.25.0"
]

[project.optional-dependencies]
web = [
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.20.0"
]
acceleration = [
    "faiss-cpu>=1.7.0",
    "onnxruntime>=1.12.0"
]
quantization = [
    "bitsandbytes>=0.35.0"
]
evaluation = [
    "mteb>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0"
]
nlp = [
    "nltk>=3.7",
    "spacy>=3.4.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0"
]
all = [
    "openembeddings[web,acceleration,quantization,evaluation,nlp]"
]

[project.urls]
Homepage = "https://github.com/llamasearchai/OpenEmbeddings"
Documentation = "https://github.com/llamasearchai/OpenEmbeddings/blob/main/docs/MASTER_DOCUMENTATION.md"
Repository = "https://github.com/llamasearchai/OpenEmbeddings.git"
"Bug Tracker" = "https://github.com/llamasearchai/OpenEmbeddings/issues"
Changelog = "https://github.com/llamasearchai/OpenEmbeddings/blob/main/CHANGELOG.md"
"Security Policy" = "https://github.com/llamasearchai/OpenEmbeddings/blob/main/SECURITY.md"

[project.scripts]
openembeddings = "openembeddings.cli:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["openembeddings*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
"openembeddings" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["openembeddings"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=openembeddings",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["openembeddings"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
    "*/setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet) 