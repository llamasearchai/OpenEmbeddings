name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy flake8 bandit safety
        pip install -e ".[dev]"
        
    - name: Code formatting check (Black)
      run: black --check --diff openembeddings/ tests/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff openembeddings/ tests/
      
    - name: Type checking (MyPy)
      run: mypy openembeddings/ --ignore-missing-imports
      
    - name: Linting (Flake8)
      run: flake8 openembeddings/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Security check (Bandit)
      run: bandit -r openembeddings/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Dependency security check (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -e ".[all]"
        
    - name: Install optional dependencies
      run: |
        pip install faiss-cpu || echo "FAISS installation failed, continuing without it"
        pip install bitsandbytes || echo "bitsandbytes installation failed, continuing without it"
        pip install onnxruntime || echo "ONNX installation failed, continuing without it"
        pip install mteb || echo "MTEB installation failed, continuing without it"
      continue-on-error: true
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=openembeddings --cov-report=xml --cov-report=html --junit-xml=pytest-results.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"
        pip install faiss-cpu
        
    - name: Test CLI functionality
      run: |
        # Test basic CLI commands
        openembeddings --help
        openembeddings embed --help
        openembeddings hybrid-retrieve --help
        
        # Test embedding functionality
        echo "Test document for embedding" > test_doc.txt
        openembeddings embed --input test_doc.txt --output test_embeddings.npy
        
        # Test hybrid retrieval
        echo -e "Document 1\nDocument 2\nDocument 3" > test_corpus.txt
        openembeddings hybrid-retrieve --query "test query" --documents test_corpus.txt --top-k 2
        
    - name: Test Docker build
      run: |
        docker build -t openembeddings:test .
        docker run --rm openembeddings:test --help
        
    - name: Test API functionality
      run: |
        # Start API in background
        python -m openembeddings.web_api &
        API_PID=$!
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1
        
        # Test embedding endpoint
        curl -X POST "http://localhost:8000/embed" \
          -H "Content-Type: application/json" \
          -d '{"texts": ["test document"], "model_name": "hashing-encoder"}' || exit 1
        
        # Clean up
        kill $API_PID

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"
        pip install faiss-cpu
        
    - name: Run benchmarks
      run: |
        python -m openembeddings.benchmarks --output benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
      
    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        
        # Build multi-platform images
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t llamasearchai/openembeddings:latest \
          -t llamasearchai/openembeddings:${{ github.event.release.tag_name }} \
          --push .

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html 